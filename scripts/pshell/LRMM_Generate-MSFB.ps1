
function LRMM_Generate-MSFB
{

    # Load networks data for recording
    $lrmmNetworks = Import-Csv "\\scotia.sgngroup.net\dfs\shared\Syn4.2.3\TEST AREA\ac00418\LRMM17\data\LRMM_Networks.csv"

    for ( $i = 1; $i -lt 24; $i++ )
    {
        Write-Host "Generating .msf for LRMMRun $($i)"

        $MSF_FILE_NAME = "LRMM_B" + $i + ".msf"
        $MSF_FILE_DESCRIPTION = "Disables subsystems and cuts demand to 25%"
        $MSF_FILE_AUTHOR = "A. Cassidy"
        $MSF_FILE_DATE = Get-Date -Format "yyyy-MM-dd"
        $MSF_FILE_COMMENT = "Initial rev"
        $MSF_FILE_REV = "1"
        $BATCH_NUMBER = $i
        $MSF_FILE_PSSCRIPT = $MyInvocation.MyCommand
        $MSF_FILE_CHANGELOG = " "
        $SCRIPT_B_SETTINGS_FILE = "\\scotia.sgngroup.net\dfs\shared\Syn4.2.3\TEST AREA\ac00418\LRMM17\settings\LRMM_B" + $i + ".ini"
        
        $msf = @"
[[Description:]]
LRMM Script B.$BATCH_NUMBER
[[Text:]]

// ================================================================
// .FILE
// $MSF_FILE_NAME
//
// .DESCRIPTION
// $MSF_FILE_DESCRIPTION
//
// .AUTHOR
// $MSF_FILE_AUTHOR
//
// .DATE
// $MSF_FILE_DATE
//
// .COMMENT
// $MSF_FILE_COMMENT
//
// .REVISION
// $MSF_FILE_REV
// ________________________________________________________________
//
// This file was generated by Powershell script $MSF_FILE_PSSCRIPT
// ________________________________________________________________
//
// .CHANGELOG
// $MSF_FILE_CHANGELOG
//
// ================================================================


////////////////////////////////////////////////////////////////
// main function
////////////////////////////////////////////////////////////////
int main()
{
	// SETTINGS FILE
	// =============
	// Full path and name for the settings file.
	string sSettingsFile = "$SCRIPT_B_SETTINGS_FILE";
	Settings defaultSettingsFile;

	// VARIABLES USED IN SCRIPT
	// ========================
	// boolean OK - report back from functions etc.
	bool bOK;
	string sMessage;
	string sModelSubsNo, sModelSubsName;
	string sModel, sModelNo, sModelName;
	long n;
	long nMessageLimit = 0;
	string sLogName;
	
	// MODEL SETTINGS FROM INI FILE
	// ============================
	// Workspace  
	string sWorkspace;
	// Warehouse   
	string sWarehouse;
	// Migrate to current version
	bool bMigrate = true;
	// Number of models to process
	long nModelCount;
	long nModelCountDefault=1;
	long nStartAt;
	long nStartAtDefault=1;
	string sSubsystemSettings;
	
	// REPORTING LOGS
	// ==============
	// Report log
	string sSynergeeLog, sSynergeeLog_temp;
	string sAnalysisLog, sAnalysisLog_temp;
	string sScriptLog, sScriptLog_temp;
	string sValidationLog, sValidationLog_temp;
	string sDataImportLog, sDataImportLog_temp;
	string sDataExportLog, sDataExportLog_temp;
	string sGeneralLog, sGeneralLog_temp;
	TextFile sSynergeeLogText;
	
	// EXCHANGE FILES
	// ==============
	string sLRMMProfiles, sLRMMProfilesSettings, sLRMMProfilesPointsSettings, sLRMMProfilesWorksheet;
	string sExportNodesSettings, sExportMainsSettings, sExportFlowsSettings;
	string sExportNodesFile, sExportMainsFile, sExportFlowsFile, sExportFilePath;
	string sExportNodes25pcFile, sExportMains25pcFile, sExportFlows25pcFile;
	
	// DATE AND TIME
	// =============
	string sDateFormatted;
	DateTime dateTimeInfo;
	bOK = dateTimeInfo.SetToCurrentTime();
	sDateFormatted = dateTimeInfo.Format("%Y-%m-%d_%H-%M-%S");	

	// LOAD SETTINGS FROM INI FILE
	// ===========================
	// Load settings file
	bOK = defaultSettingsFile.Setup(sSettingsFile);
	
	
	// LOAD REPORT LOGS
	// ================
	sSynergeeLog_temp = defaultSettingsFile.GetText("","LOGS","script_log_synergee");
	sSynergeeLog = sSynergeeLog_temp + "_" + sDateFormatted + ".txt";
	sSynergeeLogText.Setup(sSynergeeLog);
	sSynergeeLogText.OpenClear();
	sMessage = "Begin script";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = "Settings File: " + sSettingsFile;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = "---------------------------------------------------------------";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = "[SUPPLEMENTS]";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Load workspace
	sWorkspace = defaultSettingsFile.GetText("", "SUPPLEMENTS", "workspace");
	sMessage = "Using workspace: " + sWorkspace;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Load warehouse
	sWarehouse = defaultSettingsFile.GetText("", "SUPPLEMENTS", "warehouse");
	sMessage = "Using warehouse " + sWarehouse;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Done
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	sMessage = "---------------------------------------------------------------";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	sMessage = "[MODEL DATA]";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Load number of models
	nModelCount = defaultSettingsFile.GetLong(nModelCountDefault, "MODELDATA", "number_of_models");
	sMessage = "Number of models: " + nModelCount;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Load start at
	nStartAt = defaultSettingsFile.GetLong(nStartAtDefault, "MODELDATA", "start_at");
	sMessage = "Start at: " + nStartAt;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	sMessage = "---------------------------------------------------------------";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	// Analysis Log
	sAnalysisLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "analysis_log");
	sAnalysisLog = sAnalysisLog_temp + "_" + sDateFormatted + ".csv";
	sMessage = "Analysis Log: " + sAnalysisLog;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Script Log
	sScriptLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "script_log");
	sScriptLog = sScriptLog_temp + "_" + sDateFormatted + ".csv";
	sMessage = "Script Log: " + sScriptLog;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Validation
	sValidationLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "validation_log");
	sValidationLog = sValidationLog_temp + "_" + sDateFormatted + ".csv";
	sMessage = "Validation Log: " + sValidationLog;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Data Import
	sDataImportLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "data_import_log");
	sDataImportLog = sDataImportLog_temp + "_" + sDateFormatted + ".csv";
	sMessage = "Data Import Log: " + sDataImportLog;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// Data Export
	sDataExportLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "data_export_log");
	sDataExportLog = sDataExportLog_temp + "_" + sDateFormatted + ".csv";
	sMessage = "Data Export Log: " + sDataExportLog;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	// General Log
	sGeneralLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "general_log");
	sGeneralLog = sGeneralLog_temp + "_" + sDateFormatted + ".csv";
	sMessage = "General Log: " + sGeneralLog;
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	
	
	// PROFILES EXCHANGE FILE
	// ======================
	sLRMMProfiles = defaultSettingsFile.GetText(" ","EXCHANGE","LRMMProfiles_25pc");
	sLRMMProfilesWorksheet= defaultSettingsFile.GetText(" ","EXCHANGE", "LRMMProfiles_25pcWorksheet");
	sLRMMProfilesSettings = defaultSettingsFile.GetText(" ","EXCHANGE","LRMMProfiles_25pcSettings");

	// NODES & MAINS EXCHANGE FILE
	// ===========================
	sExportFilePath = defaultSettingsFile.GetText(" ", "EXCHANGE", "exchangeFilePath");
	sExportNodesSettings = defaultSettingsFile.GetText(" ", "EXCHANGE", "ExportNodesSettings");
	sExportMainsSettings = defaultSettingsFile.GetText(" ", "EXCHANGE", "ExportMainsSettings");
	sExportFlowsSettings = defaultSettingsFile.GetText(" ", "EXCHANGE", "ExportFlowsSettings");
	
	// SUBSYSTEMS EXCHANGE FILE
	// ========================
	sSubsystemSettings = defaultSettingsFile.GetText(" ","EXCHANGE","LRMMSubsystemsSettings");
	
	// Report setup complete
	sMessage = "Setup Complete";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = "Begin model cycle";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = "[MODELS]";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	
	
	// MODEL LOAD
	// ==========
	// Begin loop through models
	for (n=nStartAt; n<(nModelCount+1); n=n+1)
	{
		sMessage = " " + n + ". Load model data........................................";
		sSynergeeLogText.WriteWithDateTime(sMessage);
		System.LogInfo(sMessage);
		
		// Model in
		sModelNo = "Model" + n;
		sModel = defaultSettingsFile.GetText("","MODELSIN",sModelNo);
		sMessage = " " + sModelNo + " : " + sModel;
		sSynergeeLogText.WriteWithDateTime(sMessage);
		System.LogInfo(sMessage);
		
		// Model name
		sModelNo = "ModelName" + n;
		sModelName = defaultSettingsFile.GetText("","MODELNAMES",sModelNo);
		sMessage = " " + sModelNo + " : " + sModelName;
		sSynergeeLogText.WriteWithDateTime(sMessage);
		System.LogInfo(sMessage);

		// Model subsystem file
		sModelSubsNo = "ModelSubs" + n;
		sModelSubsName = defaultSettingsFile.GetText("","MODELSUBS", sModelSubsNo);
		
		// Export Files
		sExportNodesFile = sExportFilePath + sModelName + "_Nodes_subs.csv";
		sExportMainsFile = sExportFilePath + sModelName + "_Mains_subs.csv";
		sExportFlowsFile = sExportFilePath + sModelName + "_Flows_subs.csv";
		
		sExportNodes25pcFile = sExportFilePath + sModelName + "_Nodes_25pc.csv";
		sExportMains25pcFile = sExportFilePath + sModelName + "_Mains_25pc.csv";
		sExportFlows25pcFile = sExportFilePath + sModelName + "_Flows_25pc.csv";

		// Load the model
		bOK = Model.LoadDb(sModel, sWorkspace, sWarehouse, bMigrate);
		// Test for success
		if (bOK)
		{
			 sMessage = " ..........Model Load OK";
			 sSynergeeLogText.WriteWithDateTime(sMessage);
			 System.LogInfo(sMessage);
		}
		else
		{
			 sMessage = " xxxxxxxxxx MODEL LOAD FAILED";
			 sSynergeeLogText.WriteWithDateTime(sMessage);
			 System.LogError(sMessage);
			 continue;
		}		
		
		
		// Disable subsystems
		bOK = Model.ImportExchangeFile(sSubsystemSettings, sModelSubsName, "");
		
		// Balance the model
		// -----------------
		bOK = Analysis.Balance();
		if (bOK)
		{
			sMessage = " ..........Model Balance OK";
			sSynergeeLogText.WriteWithDateTime(sMessage);
			System.LogInfo(sMessage);
		}
		else
		{
			sMessage = " xxxxxxxxxx MODEL BALANCE FAILED";
			sSynergeeLogText.WriteWithDateTime(sMessage);
			System.LogError(sMessage);       
		}
		
		// Check: solved?
		// --------------
		bOK = Analysis.IsModelSolved();
		if (bOK)
		{
			 sMessage = " ..........Model Solved OK";
			 sSynergeeLogText.WriteWithDateTime(sMessage);
			 System.LogInfo(sMessage);
		}
		else
		{
			 sMessage = " xxxxxxxxxx MODEL SOLVED FAILED";
			 sSynergeeLogText.WriteWithDateTime(sMessage);
			 System.LogError(sMessage);    
		}
		
		// Export nodes
		bOK = Model.ExportExchangeFile(sExportNodesSettings, sExportNodesFile, " ");
		
		
		// Import 25% profile
		bOK = Model.ImportExchangeFile(sLRMMProfilesSettings, sLRMMProfiles, sLRMMProfilesWorksheet);
		// Balance the model
		// -----------------
		bOK = Analysis.Balance();
		if (bOK)
		{
			sMessage = " ..........Model Balance OK";
			sSynergeeLogText.WriteWithDateTime(sMessage);
			System.LogInfo(sMessage);
		}
		else
		{
			sMessage = " xxxxxxxxxx MODEL BALANCE FAILED";
			sSynergeeLogText.WriteWithDateTime(sMessage);
			System.LogError(sMessage);       
		}
		
		// Check: solved?
		// --------------
		bOK = Analysis.IsModelSolved();
		if (bOK)
		{
			 sMessage = " ..........Model Solved OK";
			 sSynergeeLogText.WriteWithDateTime(sMessage);
			 System.LogInfo(sMessage);
		}
		else
		{
			 sMessage = " xxxxxxxxxx MODEL SOLVED FAILED";
			 sSynergeeLogText.WriteWithDateTime(sMessage);
			 System.LogError(sMessage);    
		}
		
		// Subsystem trace
		// ---------------
		Subsystem.UsePhysicalBorders = true;
		bOK = Subsystem.Trace();
		if (bOK)
		{
			sMessage = " ..........Subsystem Trace OK";
			sSynergeeLogText.WriteWithDateTime(sMessage);
			System.LogInfo(sMessage);
		}
		else
		{
			sMessage = " xxxxxxxxxx Subsystem Trace FAILED";
			sSynergeeLogText.WriteWithDateTime(sMessage);
			System.LogError(sMessage);
		}
		
		// Export nodes
		bOK = Model.ExportExchangeFile(sExportNodesSettings, sExportNodes25pcFile, " ");
		// Export mains
		bOK = Model.ExportExchangeFile(sExportMainsSettings, sExportMains25pcFile, " ");
		// Export flows
		bOK = Model.ExportExchangeFile(sExportFlowsSettings, sExportFlows25pcFile, " ");

		// Save and close
		bOK = Model.SaveDb(sModel, bMigrate);
		if (bOK)
		{
			 sMessage = " ..........Model SAVED OK";
			 sSynergeeLogText.WriteWithDateTime(sMessage);
			 System.LogInfo(sMessage);
		}
		else
		{
			 sMessage = " xxxxxxxxxx MODEL SAVE FAILED";
			 sSynergeeLogText.WriteWithDateTime(sMessage);
			 System.LogError(sMessage);
		}		
				
		// Done
		sMessage = "Done: ... " + sModelName;
		sSynergeeLogText.WriteWithDateTime(sMessage);
		System.LogInfo(sMessage);		
		
	} // end loop
	

	// Report to log finished
	sMessage = "Finished batch";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = "Write synergee logs to file";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);	
	

	// Save logs
	sLogName = "General";
	bOK = System.SendLogToCSV(sLogName, sGeneralLog, nMessageLimit);

	sLogName = "Analysis";
	bOK = System.SendLogToCSV(sLogName, sAnalysisLog, nMessageLimit);

	sLogName = "Validation";
	bOK = System.SendLogToCSV(sLogName, sValidationLog, nMessageLimit);

	sLogName = "Scripting";
	bOK = System.SendLogToCSV(sLogName, sScriptLog, nMessageLimit);	
		
	sMessage = " ";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);
	sMessage = "DONE";
	sSynergeeLogText.WriteWithDateTime(sMessage);
	System.LogInfo(sMessage);	
	
	// end script
	return 0;

}
"@

        $outFile = "\\scotia.sgngroup.net\dfs\shared\Syn4.2.3\TEST AREA\ac00418\LRMM17\scripts\synergee\MSF_B\LRMM_B" + $i + ".msf"
        $msf | Out-File $outFile

        # Now update networks db records
        $lrmmNetworks | where { $_.LRMMRun -eq $i } | foreach { $_.B_MSF = $outFile }

    }

    Write-Host " "
    Write-Host "Finished generation"

    # Now write to records
    $lrmmNetworks | Export-Csv "\\scotia.sgngroup.net\dfs\shared\Syn4.2.3\TEST AREA\ac00418\LRMM17\data\LRMM_Networks.csv" -NoTypeInformation


}

